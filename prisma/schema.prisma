
generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Post {
  id        Int      @id @default(autoincrement())
  title     String   @db.VarChar(255)
  createdAt DateTime @default(now()) @db.Timestamp(6)
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("posts")
}

model User {
  id            String    @id
  name          String
  email         String
  emailVerified Boolean   @default(false)
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @default(now()) @updatedAt
  sessions      Session[]
  accounts      Account[]
  posts         Post[]

  role       String?
  banned     Boolean?  @default(false)
  banReason  String?
  banExpires DateTime?

  members     Member[]
  invitations Invitation[]

  teammembers TeamMember[]

  @@unique([email])
  @@map("user")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  impersonatedBy String?

  activeOrganizationId String?

  activeTeamId String?

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt

  @@map("account")
}

model Verification {
  id         String   @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now()) @updatedAt

  @@map("verification")
}

model Organization {
  id          String       @id
  name        String
  slug        String
  logo        String?
  createdAt   DateTime
  metadata    String?
  members     Member[]
  invitations Invitation[]

  teams Team[]
  
  organizationModules OrganizationModule[]

  @@unique([slug])
  @@map("organization")
}

model Member {
  id             String       @id
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  userId         String
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  role           String
  createdAt      DateTime

  @@map("member")
}

model Invitation {
  id             String       @id
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  email          String
  role           String?
  status         String
  expiresAt      DateTime
  inviterId      String
  user           User         @relation(fields: [inviterId], references: [id], onDelete: Cascade)

  teamId String?

  @@map("invitation")
}

model Team {
  id             String       @id
  name           String
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  createdAt      DateTime
  updatedAt      DateTime?    @updatedAt
  teammembers    TeamMember[]

  @@map("team")
}

model TeamMember {
  id        String    @id
  teamId    String
  team      Team      @relation(fields: [teamId], references: [id], onDelete: Cascade)
  userId    String
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime?

  @@map("teamMember")
}

// Module System
model Module {
  id                   String               @id @default(cuid())
  name                 String               @unique
  slug                 String               @unique
  description          String?
  icon                 String?
  isActive             Boolean              @default(true)
  createdAt            DateTime             @default(now())
  updatedAt            DateTime             @updatedAt
  organizationModules  OrganizationModule[]
  modulePermissions    ModulePermission[]

  @@map("module")
}

model OrganizationModule {
  id             String       @id @default(cuid())
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  moduleId       String
  module         Module       @relation(fields: [moduleId], references: [id], onDelete: Cascade)
  isEnabled      Boolean      @default(true)
  settings       Json?
  assignedAt     DateTime     @default(now())
  assignedBy     String
  customRoles    CustomRole[]

  @@unique([organizationId, moduleId])
  @@map("organizationModule")
}

model CustomRole {
  id                   String               @id @default(cuid())
  organizationModuleId String
  organizationModule   OrganizationModule   @relation(fields: [organizationModuleId], references: [id], onDelete: Cascade)
  name                 String
  description          String?
  isPredefined         Boolean              @default(false)
  isActive             Boolean              @default(true)
  createdAt            DateTime             @default(now())
  updatedAt            DateTime             @updatedAt
  memberRoles          MemberModuleRole[]
  permissions          RolePermission[]

  @@unique([organizationModuleId, name])
  @@map("customRole")
}

model ModulePermission {
  id          String           @id @default(cuid())
  moduleId    String
  module      Module           @relation(fields: [moduleId], references: [id], onDelete: Cascade)
  resource    String
  action      String
  description String?
  createdAt   DateTime         @default(now())
  roles       RolePermission[]

  @@unique([moduleId, resource, action])
  @@map("modulePermission")
}

model RolePermission {
  id                 String           @id @default(cuid())
  customRoleId       String
  customRole         CustomRole       @relation(fields: [customRoleId], references: [id], onDelete: Cascade)
  modulePermissionId String
  modulePermission   ModulePermission @relation(fields: [modulePermissionId], references: [id], onDelete: Cascade)
  granted            Boolean          @default(true)
  createdAt          DateTime         @default(now())

  @@unique([customRoleId, modulePermissionId])
  @@map("rolePermission")
}

model MemberModuleRole {
  id           String     @id @default(cuid())
  memberId     String
  customRoleId String
  customRole   CustomRole @relation(fields: [customRoleId], references: [id], onDelete: Cascade)
  assignedAt   DateTime   @default(now())
  assignedBy   String

  @@unique([memberId, customRoleId])
  @@map("memberModuleRole")
}

// TodoList Module
model TodoList {
  id             String     @id @default(cuid())
  organizationId String
  title          String
  description    String?
  status         String     @default("active")
  createdBy      String
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt
  items          TodoItem[]

  @@index([organizationId])
  @@map("todoList")
}

model TodoItem {
  id          String   @id @default(cuid())
  todoListId  String
  todoList    TodoList @relation(fields: [todoListId], references: [id], onDelete: Cascade)
  title       String
  description String?
  completed   Boolean  @default(false)
  priority    String   @default("medium")
  dueDate     DateTime?
  createdBy   String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([todoListId])
  @@map("todoItem")
}
